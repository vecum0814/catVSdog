# -*- coding: utf-8 -*-
"""Angelswing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h8b-N70vaRRF8eTfMceUglk_HxOLdM31
"""

import os, shutil

original_dataset_dir = '/content/drive/MyDrive/AngelsWing/PetImages'

base_dir = '/content/drive/MyDrive/AngelsWing/CatandDog'
os.mkdir(base_dir)

train_dir = os.path.join(base_dir, 'train')
os.mkdir(train_dir)
validation_dir = os.path.join(base_dir, 'validation')
os.mkdir(validation_dir)
test_dir = os.path.join(base_dir, 'test')
os.mkdir(test_dir)

train_cats_dir = os.path.join(train_dir, 'cats')
os.mkdir(train_cats_dir)

train_dogs_dir = os.path.join(train_dir, 'dogs')
os.mkdir(train_dogs_dir)

validation_cats_dir = os.path.join(validation_dir, 'cats')
os.mkdir(validation_cats_dir)

validation_dogs_dir = os.path.join(validation_dir, 'dogs')
os.mkdir(validation_dogs_dir)

test_cats_dir = os.path.join(test_dir, 'cats')
os.mkdir(test_cats_dir)

test_dogs_dir = os.path.join(test_dir, 'dogs')
os.mkdir(test_dogs_dir)

def copy_files(DogOrCat_path, start_num, end_num, trainOrval_path):
    
    image_paths = [os.path.join(original_dataset_dir, DogOrCat_path + '/' + str(i) + '.jpg')
                  for i in range(start_num, end_num)]
    target_copy_paths = os.path.join(base_dir, trainOrval_path, DogOrCat_path)
    
    if not os.path.isdir(target_copy_paths):
        os.makedirs(target_copy_paths)
        
    for image_path in image_paths:
        shutil.copy(image_path, target_copy_paths)
    
    print("Copy Finished.")

image_paths = [os.path.join(original_dataset_dir, 'cat' + '/' + str(i) + '.jpg')
              for i in range(0, 7500)]
target_copy_paths = os.path.join(base_dir, 'train', 'cats')
for image_path in image_paths:
  shutil.copy(image_path, target_copy_paths)

print("Copy Finished.")

fnames = ['{}.jpg'.format(i) for i in range(7500)]
for fname in fnames:
  src = os.path.join(original_dataset_dir, 'dog' + '/', fname)
  dst = os.path.join(train_dogs_dir, fname)
  shutil.copyfile(src, dst)

import os
from PIL import Image
folder_path = train_dir
extensions = ['jpg']
for fldr in os.listdir(folder_path):
    sub_folder_path = os.path.join(folder_path, fldr)
    for filee in os.listdir(sub_folder_path):
        file_path = os.path.join(sub_folder_path, filee)
        print('** Path: {}  **'.format(file_path), end="\r", flush=True)
        im = Image.open(file_path)
        rgb_im = im.convert('RGB')
        if filee.split('.')[1] not in extensions:
            extensions.append(filee.split('.')[1])

fnames = ['{}.jpg'.format(i) for i in range(7500)]
for fname in fnames:
  src = os.path.join(original_dataset_dir, 'cat' + '/', fname)
  dst = os.path.join(train_cats_dir, fname)
  shutil.copyfile(src, dst)

fnames = ['{}.jpg'.format(i) for i in range(7500, 10000)]
for fname in fnames:
  src = os.path.join(original_dataset_dir, 'dog' + '/', fname)
  dst = os.path.join(validation_dogs_dir, fname)
  shutil.copyfile(src, dst)

import os, shutil

original_dataset_dir = '/content/drive/MyDrive/AngelsWing/PetImages'
base_dir = '/content/drive/MyDrive/AngelsWing/CatandDog'

train_dir = os.path.join(base_dir, 'train')
validation_dir = os.path.join(base_dir, 'validation')
test_dir = os.path.join(base_dir, 'test')

train_cats_dir = os.path.join(train_dir, 'cats')
train_dogs_dir = os.path.join(train_dir, 'dogs')
validation_cats_dir = os.path.join(validation_dir, 'cats')
validation_dogs_dir = os.path.join(validation_dir, 'dogs')
test_cats_dir = os.path.join(test_dir, 'cats')
test_dogs_dir = os.path.join(test_dir, 'dogs')

fnames = ['{}.jpg'.format(i) for i in range(7500, 10000)]
for fname in fnames:
  src = os.path.join(original_dataset_dir, 'cat' + '/', fname)
  dst = os.path.join(validation_cats_dir, fname)
  shutil.copyfile(src, dst)

fnames = ['{}.jpg'.format(i) for i in range(10000, 12500)]
for fname in fnames:
  src = os.path.join(original_dataset_dir, 'cat' + '/', fname)
  dst = os.path.join(test_cats_dir, fname)
  shutil.copyfile(src, dst)

fnames = ['{}.jpg'.format(i) for i in range(10000, 12500)]
for fname in fnames:
  src = os.path.join(original_dataset_dir, 'dog' + '/', fname)
  dst = os.path.join(test_dogs_dir, fname)
  shutil.copyfile(src, dst)

from keras import layers
from keras import models

model = models.Sequential()
model.add(layers.Conv2D(32, (3,3), activation = 'relu', input_shape = (150, 150, 3)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation = 'relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(128, (3, 3), activation = 'relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(128, (3, 3), activation = 'relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Flatten())
model.add(layers.Dense(512, activation = 'relu'))
model.add(layers.Dense(1, activation = 'sigmoid'))

model.summary()

from keras import optimizers

model.compile(loss = 'binary_crossentropy',
              optimizer = optimizers.RMSprop(learning_rate = 1e-4),
              metrics = ['acc'])

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255)
test_datagen = ImageDataGenerator(rescale = 1./255)

train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size = (150, 150),
    batch_size = 50,
    class_mode = 'binary'
)

validation_generator = train_datagen.flow_from_directory(
    validation_dir,
    target_size = (150, 150),
    batch_size = 50,
    class_mode = 'binary'
)

for data_batch, labels_batch in train_generator:
  print('배치 데이터 크기:', data_batch.shape)
  print('배치 레이블 크기:', labels_batch.shape)
  break

history = model.fit_generator(
    train_generator,
    steps_per_epoch = 300,
    epochs = 30,
    validation_data = validation_generator,
    validation_steps = 100
)

model.save('Angelswing1.h5')



!ls Angelswing

model = models.Sequential()
model.add(layers.Conv2D(32, (3,3), activation = 'relu', input_shape = (150, 150, 3)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation = 'relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(128, (3, 3), activation = 'relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(128, (3, 3), activation = 'relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Flatten())
model.add(layers.Dropout(0.5))
model.add(layers.Dense(512, activation = 'relu'))
model.add(layers.Dense(1, activation = 'sigmoid'))

model.compile(loss = 'binary_crossentropy',
              optimizer = optimizers.RMSprop(learning_rate = 1e-4),
              metrics = ['acc'])

history = model.fit_generator(
    train_generator,
    steps_per_epoch = 300,
    epochs = 30,
    validation_data = validation_generator,
    validation_steps = 100
)

model.save('AngelsWing.h5')

import matplotlib.pyplot as plt

acc = history.history['acc']
val_acc = history.history['val_acc']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(1, len(acc) + 1)

plt.plot(epochs, acc, 'bo', label = 'Training acc')
plt.plot(epochs, val_acc, 'b', label = 'Validation acc')
plt.title('Training and validation accuracy')
plt.legend()

plt.figure()

plt.plot(epochs, loss, 'bo', label = 'Training loss')
plt.plot(epochs, val_loss, 'b', label = 'Validation loss')
plt.title('Training and validation loss')
plt.legend()

plt.show()

from keras.models import load_model
model = load_model('/content/drive/MyDrive/AngelsWing/AngelsWing2.h5')

model.summary()

from keras.preprocessing import image
import numpy as np
image = image.load_img('/content/drive/MyDrive/AngelsWing/CatandDog/test/cats/10001.jpg',target_size=(150,150,3))
image = np.asarray(image)
image = np.expand_dims(image, axis=0)
image = image * 1.0 / 255

predicted = model.predict(image)
if(predicted >= 0.5):
  print("This image is a dog with a confidence of: {0}".format(predicted))
else:
  print("This image is a cat with a confidence of: {0}".format(1 - predicted))

from keras.preprocessing import image
import numpy as np
image = image.load_img('/content/drive/MyDrive/AngelsWing/CatandDog/test/dogs/10001.jpg',target_size=(150,150,3))
image = np.asarray(image)
image = np.expand_dims(image, axis=0)
image = image * 1.0 / 255

if(predicted >= 0.5):
  print("This image is a dog with a confidence of: {0}".format(predicted))
else:
  print("This image is a cat with a confidence of: {0}".format(1 - predicted))

